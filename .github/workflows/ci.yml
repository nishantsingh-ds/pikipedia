name: WonderBot CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  judgeval:
    runs-on: ubuntu-latest
    
    # Add environment variables for testing
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check environment variables
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ùå OPENAI_API_KEY is not set"
            exit 1
          else
            echo "‚úÖ OPENAI_API_KEY is configured"
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install judgeval requests
          echo "‚úÖ Dependencies installed successfully"

      - name: Verify installation
        run: |
          python -c "import judgeval; print('‚úÖ Judgeval imported successfully')"
          python -c "import fastapi; print('‚úÖ FastAPI imported successfully')"
          python -c "import crewai; print('‚úÖ CrewAI imported successfully')"

      - name: Start backend
        run: |
          echo "üöÄ Starting backend server..."
          uvicorn src.kidapp.api:app --host 0.0.0.0 --port 8000 &
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"
          
          # Wait for server to start with better error handling
          echo "‚è≥ Waiting for server to start..."
          for i in {1..30}; do
            if curl -sf http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úÖ Server is running!"
              # Check health endpoint details
              curl -s http://localhost:8000/health | python3 -c "import sys, json; data=json.load(sys.stdin); print(f'Health: {data.get(\"status\")}, OpenAI: {data.get(\"openai_configured\")}')"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Server failed to start within 30 seconds"
              echo "Checking server logs..."
              ps aux | grep uvicorn
              exit 1
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 1
          done

      - name: Test API endpoint
        run: |
          echo "üß™ Testing API endpoint..."
          response=$(curl -s -w "%{http_code}" -X POST "http://localhost:8000/generate" \
            -F "topic=test question" \
            -F "age=7")
          http_code="${response: -3}"
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ API endpoint is working"
          else
            echo "‚ùå API endpoint returned status: $http_code"
            echo "Response: $response"
          fi

      - name: Generate answers
        run: |
          echo "üìù Generating answers..."
          python generate_answers.py
          echo "‚úÖ Answer generation completed"

      - name: Verify generated outputs
        run: |
          if [ -f "wonderbot_outputs.csv" ]; then
            echo "‚úÖ wonderbot_outputs.csv created"
            echo "Number of answers generated: $(tail -n +2 wonderbot_outputs.csv | wc -l)"
            echo "Sample output:"
            head -3 wonderbot_outputs.csv
          else
            echo "‚ùå wonderbot_outputs.csv not found"
            exit 1
          fi

      - name: Run Judgeval
        run: |
          echo "‚öñÔ∏è Running Judgeval evaluation..."
          judgeval evaluate --input wonderbot_outputs.csv --criteria criteria.yaml --output judgeval_results.csv
          echo "‚úÖ Judgeval completed successfully"

      - name: Check Judgeval results
        run: |
          if [ -f "judgeval_results.csv" ]; then
            echo "‚úÖ judgeval_results.csv created"
            echo "Results summary:"
            cat judgeval_results.csv
            
            if grep -q "NO" judgeval_results.csv; then
              echo "‚ùå Some answers failed the evaluation!"
              echo "Failed criteria details:"
              grep "NO" judgeval_results.csv
              exit 1
            else
              echo "‚úÖ All answers passed Judgeval evaluation."
            fi
          else
            echo "‚ùå judgeval_results.csv not found"
            exit 1
          fi

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":x: WonderBot CI failed!\nRepo: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nSee details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":white_check_mark: WonderBot CI passed!\nRepo: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nSee details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 